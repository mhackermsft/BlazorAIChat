@page "/admin/users"
@attribute [Authorize(Roles = nameof(UserRoles.Admin))]
@rendermode InteractiveServer
@using BlazorAIChat.Models
@using BlazorAIChat.Utils
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AIChatDBContext> dbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="admin-container">
    <h3>Users</h3>

@if (string.IsNullOrEmpty(selectedUser.Id))
{
    <table class="table table-striped table-hover">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Role</th>
                <th>Requested</th>
                <th>Approved</th>
                <th>Approved by</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@Enum.GetName(user.Role)</td>
                    <td>@user.DateRequested</td>
                    <td>@user.DateApproved</td>
                    <td>@users.Where(x => x.Id == user.ApprovedBy).FirstOrDefault()?.Name</td>
                    <td>
                        @if (user.DateApproved == null)
                        {
                            <button type="button" class="btn btn-success btn-sm" @onclick="() => ApproveUser(user)">Approve</button>
                        }
                        <button type="button" class="btn btn-primary btn-sm" @onclick="() => EditUser(user)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="row mt-3">
        <div class="col-md-12">
            <button class="btn btn-secondary" @onclick="NavigateToAdmin">Back</button>          
        </div>
    </div>
}
</div>
@if (!string.IsNullOrEmpty(selectedUser.Id))
{
    <div class="card mt-3" style="max-width:700px">
        <div class="card-header">
            <h4>Edit User</h4>
        </div>
        <div class="card-body">
            <div class="form-group">
                <label>Name:</label>
                <InputText class="form-control" @bind-Value="selectedUser.Name" />
            </div>
            <div class="form-group">
                <label>Email:</label>
                <InputText class="form-control" @bind-Value="selectedUser.Email" />
            </div>
            <div class="form-group">
                <label>Role:</label>
                <InputSelect class="form-control" @bind-Value="selectedUser.Role">
                    @foreach (var role in Enum.GetValues(typeof(UserRoles)))
                    {
                        <option value="@role">@Enum.GetName(typeof(UserRoles), role)</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label>Requested:</label>
                <InputDate class="form-control" @bind-Value="selectedUser.DateRequested" />
            </div>
            <div class="form-group">
                <label>Approved:</label>
                <InputDate class="form-control" @bind-Value="selectedUser.DateApproved" />
            </div>
            <br/>
            <button type="button" class="btn btn-primary" @onclick="SaveChanges">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
        </div>
    </div>

}

@code {
    private List<User> users = new List<User>();
    private User selectedUser = new User() { Id=string.Empty };
    private User? currentUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userPrincipal = authState.User;
            if (userPrincipal.Identity?.IsAuthenticated == true)
            {
                currentUser = UserUtils.ConvertPrincipalToUser(userPrincipal);
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Initialization error: {ex.Message}");
        }

        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            users = await dbContext.Users.OrderBy(x => x.DateApproved).ThenBy(x => x.Name).ToListAsync();
        }
    }

    private void EditUser(User user)
    {
        selectedUser = user;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        selectedUser = new User() {Id=string.Empty };
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        if (!string.IsNullOrEmpty(selectedUser.Id) && currentUser != null)
        {
            using (var dbContext = dbContextFactory.CreateDbContext())
            {
                if (selectedUser.Role == UserRoles.Guest)
                {
                    selectedUser.DateApproved = null;
                    selectedUser.ApprovedBy = null;
                }

                dbContext.Update(selectedUser);
                await dbContext.SaveChangesAsync();
                selectedUser = new User() { Id = string.Empty };
                users = await dbContext.Users.ToListAsync();
                StateHasChanged();
            }
        }
    }

    private async void ApproveUser(User user)
    {
        if (currentUser != null)
        {
            using (var dbContext = dbContextFactory.CreateDbContext())
            {
                user.DateApproved = DateTime.Now;
                user.ApprovedBy = currentUser.Id;
                user.Role = UserRoles.User;
                dbContext.Update(user);
                await dbContext.SaveChangesAsync();
                users = await dbContext.Users.ToListAsync();
                StateHasChanged();
            }
        }
    }

    private void NavigateToAdmin()
    {
        NavigationManager.NavigateTo("/admin");
    }
}
