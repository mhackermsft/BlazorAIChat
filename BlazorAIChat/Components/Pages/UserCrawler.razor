@page "/usercrawler"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<AIChatDBContext> dbContextFactory
@inject WebCrawlerService webCrawlerService
@using BlazorAIChat.Components.Shared
@using BlazorAIChat.Models
@using BlazorAIChat.Services
@using BlazorAIChat.Utils
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore


<h3>Web Content Crawler</h3>
<div class="row">
    <div class="col-md-6">
        <label>URL:</label>
        <InputText class="form-control" @bind-Value="newUrl" ></InputText>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <button type="button" class="btn btn-primary" @onclick="Crawl">Crawl</button>
    </div>
</div>
<br/>
<h4>Crawled URLs @if (webCrawlerService.IsCrawling) { <span>[finding new urls]</span> } </h4>
<div class="row">
    <div class="col-md-12">
        <table class="table">
            <tr>
                <th>URL</th>
                <th>Status</th>
                <th>Last Update</th>
                <th></th>
            </tr>

            @foreach (var status in crawlerStatuses)
            {
                <tr>
                    <td>@status.URL</td>
                    <td>@status.LastStatus</td>
                    <td>@status.LastUpdate</td>
                    <td><button class="btn btn-danger" @onclick="()=>DeleteUrl(status.Id)">Remove</button></td>
                </tr>
            }
        </table>
    </div>
</div>

@code {
    private string newUrl = string.Empty;
    List<CrawlerStatus> crawlerStatuses = new List<CrawlerStatus>();
    User? currentUser = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadCrawlData();

        webCrawlerService.OnCrawlStateChanged += async (sender, e) =>
        {
            await LoadCrawlData();
            await InvokeAsync(StateHasChanged);
        };
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userPrincipal = authState.User;
            if (userPrincipal.Identity?.IsAuthenticated == true)
            {
                currentUser = UserUtils.ConvertPrincipalToUser(userPrincipal);
            }
            else
                currentUser = new User() { Id = Constants.GUEST_USER, Role = UserRoles.Guest, Name = Constants.GUEST_USER };

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Initialization error: {ex.Message}");
        }
    }

    private async Task LoadCrawlData()
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            if (currentUser != null)
                crawlerStatuses = await dbContext.CrawlerStatuses.Where(x => x.UserId == currentUser.Id).ToListAsync();
        }
    }

    private void Crawl()
    {
        if (currentUser!=null)
            webCrawlerService.AddURLToQueue(newUrl, currentUser.Id);
    }

    private async Task DeleteUrl(Guid id)
    {
        using (var dbContext = dbContextFactory.CreateDbContext())
        {
            var status = await dbContext.CrawlerStatuses.FirstOrDefaultAsync(x => x.Id == id);
            if (status != null)
            {
                //get any records where the parent Id is the status Id
                var records = await dbContext.CrawlerStatuses.Where(x => x.ParentId == status.Id).ToListAsync();
                dbContext.CrawlerStatuses.RemoveRange(records);

                //remove the selected record
                dbContext.CrawlerStatuses.Remove(status);
                await dbContext.SaveChangesAsync();
                await LoadCrawlData();
            }
        }
    }
}


